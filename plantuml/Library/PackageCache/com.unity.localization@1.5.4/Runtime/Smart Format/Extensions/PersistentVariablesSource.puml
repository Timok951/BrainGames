@startuml
class PersistentVariablesSource {
    + {static} IsUpdating : bool <<get>>
    + Count : int <<get>>
    + IsReadOnly : bool <<get>>
    + {static}  <<event>> EndUpdate : Action 
    + PersistentVariablesSource(formatter:SmartFormatter)
    + {static} BeginUpdating() : void
    + {static} EndUpdating() : void
    + {static} UpdateScope() : IDisposable
    + TryGetValue(name:string, value:VariablesGroupAsset) : bool
    + Add(name:string, group:VariablesGroupAsset) : void
    + Add(item:KeyValuePair<string, VariablesGroupAsset>) : void
    + Remove(name:string) : bool
    + Remove(item:KeyValuePair<string, VariablesGroupAsset>) : bool
    + Clear() : void
    + ContainsKey(name:string) : bool
    + Contains(item:KeyValuePair<string, VariablesGroupAsset>) : bool
    + CopyTo(array:KeyValuePair<string, VariablesGroupAsset>[], arrayIndex:int) : void
    + GetEnumerator() : IEnumerator
    + TryEvaluateSelector(selectorInfo:ISelectorInfo) : bool
    + OnBeforeSerialize() : void
    + OnAfterDeserialize() : void
}
class "IDictionary`2"<T1,T2> {
}
class NameValuePair {
    + name : string
}
struct ScopedUpdate {
    + Dispose() : void
}
class "ICollection`1"<T> {
}
ISource <|-- PersistentVariablesSource
"IDictionary`2" "<string,VariablesGroupAsset>" <|-- PersistentVariablesSource
ISerializationCallbackReceiver <|-- PersistentVariablesSource
PersistentVariablesSource --> "Keys<string>" "ICollection`1"
PersistentVariablesSource --> "Values<VariablesGroupAsset>" "ICollection`1"
PersistentVariablesSource +-- NameValuePair
NameValuePair --> "group" VariablesGroupAsset
PersistentVariablesSource +-- ScopedUpdate
IDisposable <|-- ScopedUpdate
@enduml

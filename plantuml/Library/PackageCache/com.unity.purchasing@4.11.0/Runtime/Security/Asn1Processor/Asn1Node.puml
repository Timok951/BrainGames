@startuml
class Asn1Node {
    + <<const>> defaultLineLen : int = 80
    + <<const>> minLineLen : int = 60
    + Asn1Node()
    + IsIndefiniteLength : bool <<get>> <<set>>
    + Clone() : Asn1Node
    + Tag : byte <<get>> <<set>>
    + MaskedTag : byte <<get>>
    + LoadData(byteData:byte[]) : bool
    + {static} GetDescendantNodeCount(node:Asn1Node) : long
    + LoadData(xdata:Stream) : bool
    + GetRawData() : byte[]
    + IsEmptyData : bool <<get>>
    + SaveData(xdata:Stream) : bool
    + ClearAll() : void
    + AddChild(xdata:Asn1Node) : void
    + InsertChild(xdata:Asn1Node, index:int) : int
    + InsertChild(xdata:Asn1Node, indexNode:Asn1Node) : int
    + InsertChildAfter(xdata:Asn1Node, indexNode:Asn1Node) : int
    + InsertChildAfter(xdata:Asn1Node, index:int) : int
    + RemoveChild(index:int) : Asn1Node
    + RemoveChild(node:Asn1Node) : Asn1Node
    + ChildNodeCount : long <<get>>
    + GetChildNode(index:int) : Asn1Node
    + TagName : string <<get>>
    + GetText(startNode:Asn1Node, lineLen:int) : string
    + Path : string <<get>>
    + GetDataStr(pureHexMode:bool) : string
    + GetLabel(mask:uint) : string
    + DataLength : long <<get>>
    + LengthFieldBytes : long <<get>>
    + Deepness : long <<get>>
    + DataOffset : long <<get>>
    + UnusedBits : byte <<get>> <<set>>
    + GetDescendantNodeByPath(nodePath:string) : Asn1Node
    {static} + GetDecendantNodeByOid(oid:string, startNode:Asn1Node) : Asn1Node
    + <<const>> TagLength : int = 1
    + <<const>> BitStringUnusedFiledLength : int = 1
    + ParseEncapsulatedData : bool <<get>> <<set>>
}
class TagTextMask {
    + <<const>> SHOW_OFFSET : uint = 0x01
    + <<const>> SHOW_DATA : uint = 0x02
    + <<const>> USE_HEX_OFFSET : uint = 0x04
    + <<const>> SHOW_TAG_NUMBER : uint = 0x08
    + <<const>> SHOW_PATH : uint = 0x10
}
IAsn1Node <|-- Asn1Node
Asn1Node --> "ParentNode" Asn1Node
Asn1Node +-- TagTextMask
@enduml

@startuml
class Json <<static>> {
    + {static} Deserialize(json:string) : object
    + {static} Serialize(obj:object) : string
}
class MiniJsonExtensions <<static>> {
    + {static} GetHash(dic:Dictionary<string, object>, key:string) : Dictionary<string, object>
    + {static} GetEnum(dic:Dictionary<string, object>, key:string) : T
    + {static} GetString(dic:Dictionary<string, object>, key:string, defaultValue:string) : string
    + {static} GetLong(dic:Dictionary<string, object>, key:string) : long
    + {static} GetStringList(dic:Dictionary<string, object>, key:string) : List<string>
    + {static} GetBool(dic:Dictionary<string, object>, key:string) : bool
    + {static} Get(dic:Dictionary<string, object>, key:string) : T
    + {static} toJson(obj:Dictionary<string, object>) : string
    + {static} toJson(obj:Dictionary<string, string>) : string
    + {static} toJson(array:string[]) : string
    + {static} ArrayListFromJson(json:string) : List<object>
    + {static} HashtableFromJson(json:string) : Dictionary<string, object>
}
class MiniJson {
    + {static} JsonEncode(json:object) : string
    + {static} JsonDecode(json:string) : object
}
class Parser <<sealed>> {
    + {static} IsWordBreak(c:char) : bool
    + {static} Parse(jsonString:string) : object
    + Dispose() : void
}
class Serializer <<sealed>> {
    + {static} Serialize(obj:object) : string
}
enum TOKEN {
    NONE,
    CURLY_OPEN,
    CURLY_CLOSE,
    SQUARED_OPEN,
    SQUARED_CLOSE,
    COLON,
    COMMA,
    STRING,
    NUMBER,
    TRUE,
    FALSE,
    NULL,
}
Json +-- Parser
IDisposable <|-- Parser
Json +-- Serializer
Parser +-- TOKEN
@enduml

@startuml
class TaskCachingUtilityTests {
    + RunCachedOperation_WhenSomeItemsCached_UncachedItemsAreProcessed() : void
    + RunCachedOperation_WhenCancelled_DoesNotContinueProcessing() : void
    + RunCachedOperation_WhenNoCache_ProcessesAllItems() : void
}
class ItemContext {
    + ItemContext(input:int)
    + input : int
    + result : int
}
class FakeTracker {
    + shouldCancel : bool
}
class "TestRunCachedCallbacks`1"<T> {
    + CreateCachedInfoCount : int
    + CreateCacheEntryCount : int
    + PostProcessCount : int
    + ProcessCachedCount : int
    + ProcessUncachedCount : int
    + ClearCounts() : void
    + CreateCachedInfo(item:WorkItem<T>) : CachedInfo
    + CreateCacheEntry(item:WorkItem<T>) : CacheEntry
    + PostProcess(item:WorkItem<T>) : void
    + ProcessCached(item:WorkItem<T>, info:CachedInfo) : void
    + ProcessUncached(item:WorkItem<T>) : void
}
class "IRunCachedCallbacks`1"<T> {
}
class "Func`2"<T1,T2> {
}
class "Action`1"<T> {
}
class "Action`2"<T1,T2> {
}
TaskCachingUtilityTests +-- ItemContext
TaskCachingUtilityTests +-- FakeTracker
IProgressTracker <|-- FakeTracker
TaskCachingUtilityTests +-- "TestRunCachedCallbacks`1"
"IRunCachedCallbacks`1" "<T>" <|-- "TestRunCachedCallbacks`1"
"TestRunCachedCallbacks`1" --> "CreateCachedInfoCB<WorkItem<T>,CachedInfo>" "Func`2"
"TestRunCachedCallbacks`1" --> "CreateCacheEntryCB<WorkItem<T>,CacheEntry>" "Func`2"
"TestRunCachedCallbacks`1" --> "PostProcessCB<WorkItem<T>>" "Action`1"
"TestRunCachedCallbacks`1" --> "ProcessCachedCB<WorkItem<T>,CachedInfo>" "Action`2"
"TestRunCachedCallbacks`1" --> "ProcessUncachedCB<WorkItem<T>>" "Action`1"
@enduml

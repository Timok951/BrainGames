@startuml
class ArchiveAndCompressTests {
    + WhenAssetInBundleHasDependencies_DependenciesAreInDetails() : void
    + WhenBundleDoesNotHaveDependencies_DependenciesAreNotInDetails() : void
    + WhenUsingLongPath_CopyFileWithTimestampIfDifferent_ThrowsPathTooLongException(path1:string, path2:string) : void
    + PlatformCanHandle_LongPathReadingAndWriting() : void
    + WhenInputsChanges_AndRebuilt_CachedDataIsUsedAsExpected(shouldRebuild:bool, postFirstBuildAction:Action<RebuildTestContext>) : void
    + WhenArchiveIsAlreadyBuilt_CachedVersionIsUsed() : void
    + WhenArchiveIsCached_AndRebuildingArchive_HashIsAssignedToOutput() : void
    + WhenInputsChange_BundleOutputHashIsAffectedAsExpected(hashShouldChange:bool, postFirstBuildAction:Action<ContentHashTestContext>) : void
    + ResourceFilesAreAddedToBundles() : void
    + WhenBuildingArchive_BuildLogIsPopulated() : void
    + WhenArchiveIsAlreadyBuilt_AndArchiveIsInOutputDirectory_ArchiveIsNotCopied() : void
    + WhenArchiveIsAlreadyBuilt_AndArchiveIsInOutputDirectoryButTimestampMismatch_ArchiveIsCopied() : void
    + SupportsMultiThreadedArchiving_WhenEditorIsBefore20193_IsFalse() : void
    + CalculateBundleDependencies_ReturnsRecursiveDependencies_ForNonRecursiveInputs() : void
    + CalculateBundleDependencies_ReturnsRecursiveDependencies_ForRecursiveInputs() : void
}
class RebuildTestContext {
}
class ContentHashTestContext {
}
class ScopeCapturer {
    + AddEntry(level:LogLevel, msg:string) : void
    + BeginBuildStep(level:LogLevel, stepName:string, subStepsCanBeThreaded:bool) : void
    + ContainsScopeWithSubstring(subString:string) : bool
    + EndBuildStep() : void
}
class "List`1"<T> {
}
ArchiveAndCompressTestFixture <|-- ArchiveAndCompressTests
ArchiveAndCompressTests --> "RebuildTestCases" IEnumerable
ArchiveAndCompressTests --> "ContentHashTestCases" IEnumerable
ArchiveAndCompressTests +-- RebuildTestContext
ArchiveAndCompressTests +-- ContentHashTestContext
ArchiveAndCompressTests +-- ScopeCapturer
IBuildLogger <|-- ScopeCapturer
ScopeCapturer o-> "Scopes<string>" "List`1"
@enduml

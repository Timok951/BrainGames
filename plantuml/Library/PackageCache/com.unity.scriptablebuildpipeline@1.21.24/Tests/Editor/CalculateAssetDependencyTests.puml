@startuml
class CalculateAssetDependencyTests {
    + Setup() : void
    + OneTimeTeardown() : void
    + WhenAssetHasNoDependencies() : void
    + WhenAssetDoesNotExist_AssetResultIsEmpty() : void
    + WhenSomeAssetDataIsCached_CachedVersionIsUsed() : void
    + WhenObjectInfluencesReferencedObjectBuildTags_BuildUsageTagsAreAdded() : void
    + WhenSpriteWithAtlas_SpriteImportDataCreated(spriteMode:SpritePackerMode, spritePackingTag:string, hasReferencingSpriteAtlas:bool, expectedPacked:bool) : void
    + WhenSpriteWithAtlasUpdated_SpriteInfoUpdated(spriteMode:SpritePackerMode) : void
    + WhenAssetHasANullRepresentation_LogsWarning() : void
    + WhenAssetHasMultipleRepresentations_ExtendedDataContainsAllButMainAsset() : void
    + WhenExplicitSpriteAndAtlas_AtlasOnlyReferencesSprites() : void
    + WhenExplicitSpritesAndImplicitAtlas_SpritesOnlyReferenceSprites() : void
    + WhenAssetRefsExplicitPackedSprite_AssetOnlyRefsSprite() : void
    + WhenAssetRefsExplicitPackedSprite_CachedAssetOnlyRefsSprite() : void
    + WhenAssetRefsExplicitSprite_AssetRefsSpriteAndTexture() : void
    + WhenCanceledThroughProgressTracker_ReturnsCanceled() : void
    + TaskIsRun_WhenAssetHasNoMultipleRepresentations_ExtendedDataIsEmpty() : void
    + TaskIsRun_WhenAssetHasMultipleRepresentations_ExtendedDataContainsEntryForAsset() : void
    + TaskIsRun_WhenAssetHasMultipleRepresentations_AndDisableVisibleSubAssetRepresentations_ExtendedDataIsEmpty() : void
}
class TestParams {
    + TestParams(disableVisibleSubAssetRepresentations:bool)
    + <<override>> DisableVisibleSubAssetRepresentations : bool <<get>>
    + <<override>> UseCache : bool <<get>> <<set>>
    + <<override>> NonRecursiveDependencies : bool <<get>>
    + <<override>> TempOutputFolder : string <<get>>
    + <<override>> GetContentBuildSettings() : BuildSettings
}
class TestContent {
}
class TestDependencyData {
}
class TestExtendedAssetData {
}
class NullLoadRepresentationFake {
    + <<override>> LoadAllAssetRepresentationsAtPath(assetPath:string) : UnityEngine.Object[]
}
class TestProgressTracker {
    + TaskCount : int <<get>> <<set>>
    + Progress : float <<get>>
    + UpdateInfo(taskInfo:string) : bool
    + UpdateTask(taskTitle:string) : bool
}
class "List`1"<T> {
}
class "Dictionary`2"<T1,T2> {
}
CalculateAssetDependencyTests +-- TestParams
TestBundleBuildParameters <|-- TestParams
TestParams --> "Target" BuildTarget
TestParams --> "Group" BuildTargetGroup
TestParams --> "ScriptInfo" TypeDB
TestParams --> "ContentBuildFlags" ContentBuildFlags
CalculateAssetDependencyTests +-- TestContent
TestBundleBuildContent <|-- TestContent
TestContent o-> "TestAssets<GUID>" "List`1"
TestContent --> "Assets<GUID>" "List`1"
CalculateAssetDependencyTests +-- TestDependencyData
TestDependencyDataBase <|-- TestDependencyData
TestDependencyData o-> "TestAssetInfo<GUID,AssetLoadInfo>" "Dictionary`2"
TestDependencyData o-> "TestAssetUsage<GUID,BuildUsageTagSet>" "Dictionary`2"
TestDependencyData o-> "TestSceneInfo<GUID,SceneDependencyInfo>" "Dictionary`2"
TestDependencyData o-> "TestSceneUsage<GUID,BuildUsageTagSet>" "Dictionary`2"
TestDependencyData o-> "TestDependencyHash<GUID,Hash128>" "Dictionary`2"
TestDependencyData --> "DependencyUsageCache" BuildUsageCache
TestDependencyData --> "GlobalUsage" BuildUsageTagGlobal
TestDependencyData --> "AssetInfo<GUID,AssetLoadInfo>" "Dictionary`2"
TestDependencyData --> "AssetUsage<GUID,BuildUsageTagSet>" "Dictionary`2"
TestDependencyData --> "SceneInfo<GUID,SceneDependencyInfo>" "Dictionary`2"
TestDependencyData --> "SceneUsage<GUID,BuildUsageTagSet>" "Dictionary`2"
TestDependencyData --> "DependencyHash<GUID,Hash128>" "Dictionary`2"
CalculateAssetDependencyTests +-- TestExtendedAssetData
TestBundleExtendedAssetData <|-- TestExtendedAssetData
TestExtendedAssetData o-> "TestExtendedData<GUID,ExtendedAssetData>" "Dictionary`2"
TestExtendedAssetData --> "ExtendedData<GUID,ExtendedAssetData>" "Dictionary`2"
CalculateAssetDependencyTests +-- NullLoadRepresentationFake
CalculateAssetDependencyHooks <|-- NullLoadRepresentationFake
CalculateAssetDependencyTests +-- TestProgressTracker
IProgressTracker <|-- TestProgressTracker
@enduml

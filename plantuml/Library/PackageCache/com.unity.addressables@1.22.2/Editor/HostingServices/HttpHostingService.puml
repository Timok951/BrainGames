@startuml
class HttpHostingService {
    + HostingServicePort : int <<get>> <<protected set>>
    + UploadSpeed : int <<get>> <<set>>
    + <<override>> IsHostingServiceRunning : bool <<get>>
    + HttpHostingService()
    + <<override>> StartHostingService() : void
    + <<override>> StopHostingService() : void
    + <<override>> OnGUI() : void
    + <<override>> OnBeforeSerialize(dataStore:KeyDataStore) : void
    + <<override>> OnAfterDeserialize(dataStore:KeyDataStore) : void
    + ResetListenPort(port:int) : void
}
enum ResultCode {
    Ok= 200,
    NotFound= 404,
}
interface IHttpContext {
}
class HttpListenerContextWrapper {
    + HttpListenerContextWrapper(context:HttpListenerContext)
    + GetRequestUrl() : Uri
    + SetResponseContentType(contentType:string) : void
    + SetResponseContentLength(contentLength:long) : void
    + GetResponseOutputStream() : Stream
}
class FileUploadOperation {
    + IsDone : bool <<get>>
    + FileUploadOperation(context:HttpListenerContext, filePath:string, uploadSpeed:int, cleanup:Action)
    + Start() : void
    + Update(stateInfo:object) : void
    + Stop() : void
}
class "List`1"<T> {
}
class "Dictionary`2"<T1,T2> {
}
BaseHostingService <|-- HttpHostingService
HttpHostingService --> "HostingServiceContentRoots<string>" "List`1"
HttpHostingService --> "ProfileVariables<string,string>" "Dictionary`2"
HttpHostingService +-- ResultCode
HttpHostingService +-- IHttpContext
HttpHostingService +-- HttpListenerContextWrapper
IHttpContext <|-- HttpListenerContextWrapper
HttpHostingService +-- FileUploadOperation
@enduml

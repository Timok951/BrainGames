@startuml
class HttpHostingServiceTests {
    + HttpHostingServiceTests()
    + SetUp() : void
    + Cleanup() : void
    + TearDown() : void
    + ShouldServeRequestedFiles(subdir1:string, subdir2:string) : void
    + FileUploadOperationSplitsDownload() : void
    + FileUploadOperationCallsCleanupOnError() : void
    + FileUploadOperationHandlesError() : void
    + HttpServiceCompletesWithUploadSpeedWhenExpected() : void
    + ShouldRespondWithStatus404IfFileDoesNotExist() : void
    + StartHostingServiceShould_AssignPortIfUnassigned() : void
    + OnBeforeSerializeShould_PersistExpectedDataToKeyDataStore() : void
    + OnBeforeSerializeShould_WasEnableCorrectToKeyDataStore() : void
    + OnAfterDeserializeShould_RestoreExpectedDataFromKeyDataStore() : void
    + ResetListenPortShould_AssignTheGivenPort() : void
    + ResetListenPortShould_AssignRandomPortIfZero() : void
    + ResetListenPortShouldNot_StartServiceIfItIsNotRunning() : void
    + ResetListenPortShould_RestartServiceIfRunning() : void
}
class MyWebClient {
}
class MockHttpContext {
    + ContentType : string <<get>> <<set>>
    + ContentLength : long <<get>> <<set>>
    + GetRequestUrl() : Uri
    + SetResponseContentType(contentType:string) : void
    + SetResponseContentLength(contentLength:long) : void
    + GetResponseOutputStream() : Stream
}
HttpHostingServiceTests +-- MyWebClient
WebClient <|-- MyWebClient
HttpHostingServiceTests +-- MockHttpContext
MockHttpContext --> "Url" Uri
MockHttpContext --> "OutputStream" Stream
@enduml

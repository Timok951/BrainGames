@startuml
abstract class DynamicLocatorTests {
    + GetResourceLocations_WhenLocationExistsAndTypeIsCorrect_LocationIsReturned() : void
    + CreateDynamicLocations_CreatesLocationsWithResourceTypes() : void
    + CreateDynamicLocations_WithDepdencies_CreatesLocationsWithResourceTypes() : void
    + CreateDynamicLocations_WithSpriteAtlas_CreatesLocationsSpriteResourceTypes() : void
    + GetResourceLocations_WithInvalidMainKey_DoesNotReturnALocation() : void
    + GetResourceLocations_WithInvalidType_DoesNotReturnALocation() : void
    + GetResourceLocations_WhenSpriteWithoutSubkey_DoesNotReturnALocation() : void
    + GetResourceLocations_WithInvalidMainKeyAndSpriteType_DoesNotReturnALocation() : void
    + GetResourceLocations_WhenSpecifiedTypeDoesNotMatch_NoLocationReturned() : void
    + GetResourceLocations_WithCorrectBaseTypeForSprite_ReturnsTrue() : void
}
class DynamicLocatorTests_PackedMode {
}
class TestLocator {
    + TestLocator()
    + LocatorId : string <<get>>
    + Locate(key:object, type:Type, locations:IList<IResourceLocation>) : bool
}
struct KeyType {
    + key : object
    + <<override>> GetHashCode() : int
    + Equals(other:KeyType) : bool
}
class "IEnumerable`1"<T> {
}
class "IEquatable`1"<T> {
}
AddressablesTestFixture <|-- DynamicLocatorTests
DynamicLocatorTests <|-- DynamicLocatorTests_PackedMode
DynamicLocatorTests +-- TestLocator
IResourceLocator <|-- TestLocator
TestLocator --> "Keys<object>" "IEnumerable`1"
TestLocator --> "AllLocations<IResourceLocation>" "IEnumerable`1"
TestLocator +-- KeyType
"IEquatable`1" "<KeyType>" <|-- KeyType
KeyType --> "type" Type
@enduml

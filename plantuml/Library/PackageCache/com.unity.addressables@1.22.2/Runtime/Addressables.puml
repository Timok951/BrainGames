@startuml
class ResourceLocatorInfo {
    + LocalHash : string <<get>>
    + ResourceLocatorInfo(loc:IResourceLocator, localHash:string, remoteCatalogLocation:IResourceLocation)
    + CanUpdateContent : bool <<get>>
}
class InvalidKeyException {
    + Key : object <<get>>
    + InvalidKeyException(key:object)
    + InvalidKeyException(key:object, type:Type)
    + InvalidKeyException(key:object, type:Type, mergeMode:Addressables.MergeMode)
    + InvalidKeyException()
    + InvalidKeyException(message:string)
    + InvalidKeyException(message:string, innerException:Exception)
    + <<override>> Message : string <<get>>
}
class Addressables <<static>> {
    + {static} Version : string <<get>>
    + {static} ResolveInternalId(id:string) : string
    + <<const>> kAddressablesRuntimeDataPath : string = "AddressablesRuntimeDataPath"
    + <<const>> kAddressablesRuntimeBuildLogPath : string = "AddressablesRuntimeBuildLog"
    + {static} StreamingAssetsSubFolder : string <<get>>
    + {static} LibraryPath : string = "Library/com.unity.addressables/"
    + {static} BuildReportPath : string = "Library/com.unity.addressables/BuildReports/"
    + {static} BuildPath : string <<get>>
    + {static} PlayerBuildDataPath : string <<get>>
    + {static} RuntimePath : string <<get>>
    + {static} Log(msg:string) : void
    + {static} LogFormat(format:string, args:object[]) : void
    + {static} LogWarning(msg:string) : void
    + {static} LogWarningFormat(format:string, args:object[]) : void
    + {static} LogError(msg:string) : void
    + {static} LogException(op:AsyncOperationHandle, ex:Exception) : void
    + {static} LogException(ex:Exception) : void
    + {static} LogErrorFormat(format:string, args:object[]) : void
    + {static} Initialize() : AsyncOperationHandle<IResourceLocator>
    + {static} InitializeAsync() : AsyncOperationHandle<IResourceLocator>
    + {static} InitializeAsync(autoReleaseHandle:bool) : AsyncOperationHandle<IResourceLocator>
    + {static} LoadContentCatalog(catalogPath:string, providerSuffix:string) : AsyncOperationHandle<IResourceLocator>
    + {static} LoadContentCatalogAsync(catalogPath:string, providerSuffix:string) : AsyncOperationHandle<IResourceLocator>
    + {static} LoadContentCatalogAsync(catalogPath:string, autoReleaseHandle:bool, providerSuffix:string) : AsyncOperationHandle<IResourceLocator>
    + {static} LoadAsset(location:IResourceLocation) : AsyncOperationHandle<TObject>
    + {static} LoadAsset(key:object) : AsyncOperationHandle<TObject>
    + {static} LoadAssetAsync(location:IResourceLocation) : AsyncOperationHandle<TObject>
    + {static} LoadAssetAsync(key:object) : AsyncOperationHandle<TObject>
    + {static} LoadResourceLocations(keys:IList<object>, mode:MergeMode, type:Type) : AsyncOperationHandle<IList<IResourceLocation>>
    + {static} LoadResourceLocationsAsync(keys:IList<object>, mode:MergeMode, type:Type) : AsyncOperationHandle<IList<IResourceLocation>>
    + {static} LoadResourceLocationsAsync(keys:IEnumerable, mode:MergeMode, type:Type) : AsyncOperationHandle<IList<IResourceLocation>>
    + {static} LoadResourceLocations(key:object, type:Type) : AsyncOperationHandle<IList<IResourceLocation>>
    + {static} LoadResourceLocationsAsync(key:object, type:Type) : AsyncOperationHandle<IList<IResourceLocation>>
    + {static} LoadAssets(locations:IList<IResourceLocation>, callback:Action<TObject>) : AsyncOperationHandle<IList<TObject>>
    + {static} LoadAssetsAsync(locations:IList<IResourceLocation>, callback:Action<TObject>) : AsyncOperationHandle<IList<TObject>>
    + {static} LoadAssetsAsync(locations:IList<IResourceLocation>, callback:Action<TObject>, releaseDependenciesOnFailure:bool) : AsyncOperationHandle<IList<TObject>>
    + {static} LoadAssets(keys:IList<object>, callback:Action<TObject>, mode:MergeMode) : AsyncOperationHandle<IList<TObject>>
    + {static} LoadAssetsAsync(keys:IList<object>, callback:Action<TObject>, mode:MergeMode) : AsyncOperationHandle<IList<TObject>>
    + {static} LoadAssetsAsync(keys:IEnumerable, callback:Action<TObject>, mode:MergeMode) : AsyncOperationHandle<IList<TObject>>
    + {static} LoadAssetsAsync(keys:IList<object>, callback:Action<TObject>, mode:MergeMode, releaseDependenciesOnFailure:bool) : AsyncOperationHandle<IList<TObject>>
    + {static} LoadAssetsAsync(keys:IEnumerable, callback:Action<TObject>, mode:MergeMode, releaseDependenciesOnFailure:bool) : AsyncOperationHandle<IList<TObject>>
    + {static} LoadAssets(key:object, callback:Action<TObject>) : AsyncOperationHandle<IList<TObject>>
    + {static} LoadAssetsAsync(key:object, callback:Action<TObject>) : AsyncOperationHandle<IList<TObject>>
    + {static} LoadAssetsAsync(key:object, callback:Action<TObject>, releaseDependenciesOnFailure:bool) : AsyncOperationHandle<IList<TObject>>
    + {static} Release(obj:TObject) : void
    + {static} Release(handle:AsyncOperationHandle<TObject>) : void
    + {static} Release(handle:AsyncOperationHandle) : void
    + {static} ReleaseInstance(instance:GameObject) : bool
    + {static} ReleaseInstance(handle:AsyncOperationHandle) : bool
    + {static} ReleaseInstance(handle:AsyncOperationHandle<GameObject>) : bool
    + {static} GetDownloadSize(key:object) : AsyncOperationHandle<long>
    + {static} GetDownloadSizeAsync(key:object) : AsyncOperationHandle<long>
    + {static} GetDownloadSizeAsync(key:string) : AsyncOperationHandle<long>
    + {static} GetDownloadSizeAsync(keys:IList<object>) : AsyncOperationHandle<long>
    + {static} GetDownloadSizeAsync(keys:IEnumerable) : AsyncOperationHandle<long>
    + {static} DownloadDependencies(key:object) : AsyncOperationHandle
    + {static} DownloadDependenciesAsync(key:object, autoReleaseHandle:bool) : AsyncOperationHandle
    + {static} DownloadDependenciesAsync(locations:IList<IResourceLocation>, autoReleaseHandle:bool) : AsyncOperationHandle
    + {static} DownloadDependenciesAsync(keys:IList<object>, mode:MergeMode, autoReleaseHandle:bool) : AsyncOperationHandle
    + {static} DownloadDependenciesAsync(keys:IEnumerable, mode:MergeMode, autoReleaseHandle:bool) : AsyncOperationHandle
    + {static} ClearDependencyCacheAsync(key:object) : void
    + {static} ClearDependencyCacheAsync(locations:IList<IResourceLocation>) : void
    + {static} ClearDependencyCacheAsync(keys:IList<object>) : void
    + {static} ClearDependencyCacheAsync(keys:IEnumerable) : void
    + {static} ClearDependencyCacheAsync(key:string) : void
    + {static} ClearDependencyCacheAsync(key:object, autoReleaseHandle:bool) : AsyncOperationHandle<bool>
    + {static} ClearDependencyCacheAsync(locations:IList<IResourceLocation>, autoReleaseHandle:bool) : AsyncOperationHandle<bool>
    + {static} ClearDependencyCacheAsync(keys:IList<object>, autoReleaseHandle:bool) : AsyncOperationHandle<bool>
    + {static} ClearDependencyCacheAsync(keys:IEnumerable, autoReleaseHandle:bool) : AsyncOperationHandle<bool>
    + {static} ClearDependencyCacheAsync(key:string, autoReleaseHandle:bool) : AsyncOperationHandle<bool>
    + {static} GetLocatorInfo(locatorId:string) : ResourceLocatorInfo
    + {static} GetLocatorInfo(locator:IResourceLocator) : ResourceLocatorInfo
    + {static} Instantiate(location:IResourceLocation, parent:Transform, instantiateInWorldSpace:bool, trackHandle:bool) : AsyncOperationHandle<GameObject>
    + {static} Instantiate(location:IResourceLocation, position:Vector3, rotation:Quaternion, parent:Transform, trackHandle:bool) : AsyncOperationHandle<GameObject>
    + {static} Instantiate(key:object, parent:Transform, instantiateInWorldSpace:bool, trackHandle:bool) : AsyncOperationHandle<GameObject>
    + {static} Instantiate(key:object, position:Vector3, rotation:Quaternion, parent:Transform, trackHandle:bool) : AsyncOperationHandle<GameObject>
    + {static} Instantiate(key:object, instantiateParameters:InstantiationParameters, trackHandle:bool) : AsyncOperationHandle<GameObject>
    + {static} Instantiate(location:IResourceLocation, instantiateParameters:InstantiationParameters, trackHandle:bool) : AsyncOperationHandle<GameObject>
    + {static} InstantiateAsync(location:IResourceLocation, parent:Transform, instantiateInWorldSpace:bool, trackHandle:bool) : AsyncOperationHandle<GameObject>
    + {static} InstantiateAsync(location:IResourceLocation, position:Vector3, rotation:Quaternion, parent:Transform, trackHandle:bool) : AsyncOperationHandle<GameObject>
    + {static} InstantiateAsync(key:object, parent:Transform, instantiateInWorldSpace:bool, trackHandle:bool) : AsyncOperationHandle<GameObject>
    + {static} InstantiateAsync(key:object, position:Vector3, rotation:Quaternion, parent:Transform, trackHandle:bool) : AsyncOperationHandle<GameObject>
    + {static} InstantiateAsync(key:object, instantiateParameters:InstantiationParameters, trackHandle:bool) : AsyncOperationHandle<GameObject>
    + {static} InstantiateAsync(location:IResourceLocation, instantiateParameters:InstantiationParameters, trackHandle:bool) : AsyncOperationHandle<GameObject>
    + {static} LoadScene(key:object, loadMode:LoadSceneMode, activateOnLoad:bool, priority:int) : AsyncOperationHandle<SceneInstance>
    + {static} LoadScene(location:IResourceLocation, loadMode:LoadSceneMode, activateOnLoad:bool, priority:int) : AsyncOperationHandle<SceneInstance>
    + {static} LoadSceneAsync(key:object, loadMode:LoadSceneMode, activateOnLoad:bool, priority:int) : AsyncOperationHandle<SceneInstance>
    + {static} LoadSceneAsync(key:object, loadSceneParameters:LoadSceneParameters, activateOnLoad:bool, priority:int) : AsyncOperationHandle<SceneInstance>
    + {static} LoadSceneAsync(location:IResourceLocation, loadMode:LoadSceneMode, activateOnLoad:bool, priority:int) : AsyncOperationHandle<SceneInstance>
    + {static} LoadSceneAsync(location:IResourceLocation, loadSceneParameters:LoadSceneParameters, activateOnLoad:bool, priority:int) : AsyncOperationHandle<SceneInstance>
    + {static} UnloadScene(scene:SceneInstance, autoReleaseHandle:bool) : AsyncOperationHandle<SceneInstance>
    + {static} UnloadScene(handle:AsyncOperationHandle, autoReleaseHandle:bool) : AsyncOperationHandle<SceneInstance>
    + {static} UnloadScene(handle:AsyncOperationHandle<SceneInstance>, autoReleaseHandle:bool) : AsyncOperationHandle<SceneInstance>
    + {static} UnloadScene(handle:AsyncOperationHandle<SceneInstance>, unloadOptions:UnloadSceneOptions, autoReleaseHandle:bool) : AsyncOperationHandle<SceneInstance>
    + {static} UnloadSceneAsync(scene:SceneInstance, unloadOptions:UnloadSceneOptions, autoReleaseHandle:bool) : AsyncOperationHandle<SceneInstance>
    + {static} UnloadSceneAsync(handle:AsyncOperationHandle, unloadOptions:UnloadSceneOptions, autoReleaseHandle:bool) : AsyncOperationHandle<SceneInstance>
    + {static} UnloadSceneAsync(scene:SceneInstance, autoReleaseHandle:bool) : AsyncOperationHandle<SceneInstance>
    + {static} UnloadSceneAsync(handle:AsyncOperationHandle, autoReleaseHandle:bool) : AsyncOperationHandle<SceneInstance>
    + {static} UnloadSceneAsync(handle:AsyncOperationHandle<SceneInstance>, autoReleaseHandle:bool) : AsyncOperationHandle<SceneInstance>
    + {static} CheckForCatalogUpdates(autoReleaseHandle:bool) : AsyncOperationHandle<List<string>>
    + {static} UpdateCatalogs(catalogs:IEnumerable<string>, autoReleaseHandle:bool) : AsyncOperationHandle<List<IResourceLocator>>
    + {static} UpdateCatalogs(autoCleanBundleCache:bool, catalogs:IEnumerable<string>, autoReleaseHandle:bool) : AsyncOperationHandle<List<IResourceLocator>>
    + {static} AddResourceLocator(locator:IResourceLocator, localCatalogHash:string, remoteCatalogLocation:IResourceLocation) : void
    + {static} RemoveResourceLocator(locator:IResourceLocator) : void
    + {static} ClearResourceLocators() : void
    + {static} CleanBundleCache(catalogsIds:IEnumerable<string>) : AsyncOperationHandle<bool>
    + {static} CreateCatalogLocationWithHashDependencies(remoteCatalogPath:string) : ResourceLocationBase
    + {static} CreateCatalogLocationWithHashDependencies(remoteCatalogLocation:IResourceLocation) : ResourceLocationBase
    + {static} CreateCatalogLocationWithHashDependencies(remoteCatalogPath:string, remoteHashPath:string) : ResourceLocationBase
}
class "Func`2"<T1,T2> {
}
class "Action`1"<T> {
}
enum MergeMode {
    None= 0,
    UseFirst= 0,
    Union,
    Intersection,
}
class "IEnumerable`1"<T> {
}
class "AsyncOperationHandle`1"<T> {
}
ResourceLocatorInfo --> "Locator" IResourceLocator
ResourceLocatorInfo --> "CatalogLocation" IResourceLocation
ResourceLocatorInfo --> "HashLocation" IResourceLocation
Exception <|-- InvalidKeyException
InvalidKeyException --> "Type" Type
Addressables --> "ResourceManager" ResourceManager
Addressables --> "InstanceProvider" IInstanceProvider
Addressables --> "InternalIdTransformFunc<IResourceLocation,string>" "Func`2"
Addressables --> "WebRequestOverride<UnityWebRequest>" "Action`1"
Addressables --> "ResourceLocators<IResourceLocator>" "IEnumerable`1"
Addressables --> "InitializationOperation<IResourceLocator>" "AsyncOperationHandle`1"
Addressables +-- MergeMode
@enduml

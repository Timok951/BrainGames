@startuml
struct "AsyncOperationHandle`1"<TObject> {
    + GetDownloadStatus() : DownloadStatus
    + ReleaseHandleOnCompletion() : void
    + DebugName : string <<get>>
    + GetDependencies(deps:List<AsyncOperationHandle>) : void
    + Equals(other:AsyncOperationHandle<TObject>) : bool
    + <<override>> GetHashCode() : int
    + WaitForCompletion() : TObject
    + IsDone : bool <<get>>
    + IsValid() : bool
    + PercentComplete : float <<get>>
    + Release() : void
    + Result : TObject <<get>>
}
struct AsyncOperationHandle {
    + {static} IsWaitingForCompletion : bool <<get>> <<internal set>>
    + ReleaseHandleOnCompletion() : void
    + Convert() : AsyncOperationHandle<T>
    + Equals(other:AsyncOperationHandle) : bool
    + DebugName : string <<get>>
    + GetDependencies(deps:List<AsyncOperationHandle>) : void
    + <<override>> GetHashCode() : int
    + IsDone : bool <<get>>
    + IsValid() : bool
    + PercentComplete : float <<get>>
    + GetDownloadStatus() : DownloadStatus
    + Release() : void
    + Result : object <<get>>
    + WaitForCompletion() : object
}
class "IEquatable`1"<T> {
}
class "Action`1"<T> {
}
IEnumerator <|-- "AsyncOperationHandle`1"
"IEquatable`1" "<AsyncOperationHandle<TObject>>" <|-- "AsyncOperationHandle`1"
"AsyncOperationHandle`1" --> "OperationException" Exception
"AsyncOperationHandle`1" --> "Status" AsyncOperationStatus
IEnumerator <|-- AsyncOperationHandle
AsyncOperationHandle --> "OperationException" Exception
AsyncOperationHandle --> "Status" AsyncOperationStatus
@enduml

@startuml
class ResourceManager {
    + TransformInternalId(location:IResourceLocation) : string
    + AddUpdateReceiver(receiver:IUpdateReceiver) : void
    + RemoveUpdateReciever(receiver:IUpdateReceiver) : void
    + ResourceManager(alloc:IAllocationStrategy)
    + ClearDiagnosticsCallback() : void
    + ClearDiagnosticCallbacks() : void
    + UnregisterDiagnosticCallback(func:Action<DiagnosticEventContext>) : void
    + RegisterDiagnosticCallback(func:Action<AsyncOperationHandle, ResourceManager.DiagnosticEventType, int, object>) : void
    + RegisterDiagnosticCallback(func:Action<DiagnosticEventContext>) : void
    + GetResourceProvider(t:Type, location:IResourceLocation) : IResourceProvider
    + ProvideResource(location:IResourceLocation) : AsyncOperationHandle<TObject>
    + StartOperation(operation:AsyncOperationBase<TObject>, dependency:AsyncOperationHandle) : AsyncOperationHandle<TObject>
    + CreateCompletedOperation(result:TObject, errorMsg:string) : AsyncOperationHandle<TObject>
    + CreateCompletedOperationWithException(result:TObject, exception:Exception) : AsyncOperationHandle<TObject>
    + Release(handle:AsyncOperationHandle) : void
    + Acquire(handle:AsyncOperationHandle<TObject>) : AsyncOperationHandle<TObject>
    + Acquire(handle:AsyncOperationHandle) : void
    + CreateGroupOperation(locations:IList<IResourceLocation>) : AsyncOperationHandle<IList<AsyncOperationHandle>>
    + CreateGenericGroupOperation(operations:List<AsyncOperationHandle>, releasedCachedOpOnComplete:bool) : AsyncOperationHandle<IList<AsyncOperationHandle>>
    + ProvideResources(locations:IList<IResourceLocation>, callback:Action<TObject>) : AsyncOperationHandle<IList<TObject>>
    + ProvideResources(locations:IList<IResourceLocation>, releaseDependenciesOnFailure:bool, callback:Action<TObject>) : AsyncOperationHandle<IList<TObject>>
    + CreateChainOperation(dependentOp:AsyncOperationHandle<TObjectDependency>, callback:Func<AsyncOperationHandle<TObjectDependency>, AsyncOperationHandle<TObject>>) : AsyncOperationHandle<TObject>
    + CreateChainOperation(dependentOp:AsyncOperationHandle, callback:Func<AsyncOperationHandle, AsyncOperationHandle<TObject>>) : AsyncOperationHandle<TObject>
    + CreateChainOperation(dependentOp:AsyncOperationHandle<TObjectDependency>, callback:Func<AsyncOperationHandle<TObjectDependency>, AsyncOperationHandle<TObject>>, releaseDependenciesOnFailure:bool) : AsyncOperationHandle<TObject>
    + CreateChainOperation(dependentOp:AsyncOperationHandle, callback:Func<AsyncOperationHandle, AsyncOperationHandle<TObject>>, releaseDependenciesOnFailure:bool) : AsyncOperationHandle<TObject>
    + ProvideScene(sceneProvider:ISceneProvider, location:IResourceLocation, loadSceneMode:LoadSceneMode, activateOnLoad:bool, priority:int) : AsyncOperationHandle<SceneInstance>
    + ProvideScene(sceneProvider:ISceneProvider, location:IResourceLocation, loadSceneParameters:LoadSceneParameters, activateOnLoad:bool, priority:int) : AsyncOperationHandle<SceneInstance>
    + ReleaseScene(sceneProvider:ISceneProvider, sceneLoadHandle:AsyncOperationHandle<SceneInstance>) : AsyncOperationHandle<SceneInstance>
    + ProvideInstance(provider:IInstanceProvider, location:IResourceLocation, instantiateParameters:InstantiationParameters) : AsyncOperationHandle<GameObject>
    + CleanupSceneInstances(scene:Scene) : void
    + Dispose() : void
}
enum DiagnosticEventType {
    AsyncOperationFail,
    AsyncOperationCreate,
    AsyncOperationPercentComplete,
    AsyncOperationComplete,
    AsyncOperationReferenceCount,
    AsyncOperationDestroy,
}
struct DiagnosticEventContext {
    + EventValue : int <<get>>
    + Context : object <<get>>
    + Error : string <<get>>
    + DiagnosticEventContext(op:AsyncOperationHandle, type:DiagnosticEventType, eventValue:int, error:string, context:object)
}
class "Action`2"<T1,T2> {
}
class "Func`2"<T1,T2> {
}
class "Action`1"<T> {
}
struct DeferredCallbackRegisterRequest {
}
class "IList`1"<T> {
}
class "CompletedOperation`1"<TObject> {
    + CompletedOperation()
    + Init(result:TObject, success:bool, errorMsg:string, releaseDependenciesOnFailure:bool) : void
    + Init(result:TObject, success:bool, exception:Exception, releaseDependenciesOnFailure:bool) : void
}
class InstanceOperation {
    + Init(rm:ResourceManager, instanceProvider:IInstanceProvider, instantiationParams:InstantiationParameters, dependency:AsyncOperationHandle<GameObject>) : void
    + <<override>> GetDependencies(deps:List<AsyncOperationHandle>) : void
    + InstanceScene() : Scene
}
class "AsyncOperationBase`1"<T> {
}
IDisposable <|-- ResourceManager
ResourceManager --> "ExceptionHandler<AsyncOperationHandle,Exception>" "Action`2"
ResourceManager --> "InternalIdTransformFunc<IResourceLocation,string>" "Func`2"
ResourceManager --> "WebRequestOverride<UnityWebRequest>" "Action`1"
ResourceManager --> "Allocator" IAllocationStrategy
ResourceManager --> "ResourceProviders<IResourceProvider>" "IList`1"
ResourceManager --> "CertificateHandlerInstance" CertificateHandler
ResourceManager +-- DiagnosticEventType
ResourceManager +-- DiagnosticEventContext
DiagnosticEventContext --> "OperationHandle" AsyncOperationHandle
DiagnosticEventContext --> "Type" DiagnosticEventType
DiagnosticEventContext --> "Location" IResourceLocation
ResourceManager +-- DeferredCallbackRegisterRequest
ResourceManager +-- "CompletedOperation`1"
"AsyncOperationBase`1" "<TObject>" <|-- "CompletedOperation`1"
ResourceManager +-- InstanceOperation
"AsyncOperationBase`1" "<GameObject>" <|-- InstanceOperation
@enduml

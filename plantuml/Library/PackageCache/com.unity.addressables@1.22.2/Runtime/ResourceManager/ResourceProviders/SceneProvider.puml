@startuml
class SceneProvider {
    + ProvideScene(resourceManager:ResourceManager, location:IResourceLocation, loadSceneMode:LoadSceneMode, activateOnLoad:bool, priority:int) : AsyncOperationHandle<SceneInstance>
    + ProvideScene(resourceManager:ResourceManager, location:IResourceLocation, loadSceneParameters:LoadSceneParameters, activateOnLoad:bool, priority:int) : AsyncOperationHandle<SceneInstance>
    + ReleaseScene(resourceManager:ResourceManager, sceneLoadHandle:AsyncOperationHandle<SceneInstance>) : AsyncOperationHandle<SceneInstance>
}
class SceneOp {
    + SceneOp(rm:ResourceManager, provider:ISceneProvider2)
    + Init(location:IResourceLocation, loadSceneMode:LoadSceneMode, activateOnLoad:bool, priority:int, depOp:AsyncOperationHandle<IList<AsyncOperationHandle>>) : void
    + Init(location:IResourceLocation, loadSceneParameters:LoadSceneParameters, activateOnLoad:bool, priority:int, depOp:AsyncOperationHandle<IList<AsyncOperationHandle>>) : void
    + <<override>> GetDependencies(deps:List<AsyncOperationHandle>) : void
}
class UnloadSceneOp {
    + Init(sceneLoadHandle:AsyncOperationHandle<SceneInstance>, options:UnloadSceneOptions) : void
}
class "AsyncOperationBase`1"<T> {
}
ISceneProvider2 <|-- SceneProvider
SceneProvider +-- SceneOp
"AsyncOperationBase`1" "<SceneInstance>" <|-- SceneOp
IUpdateReceiver <|-- SceneOp
SceneProvider +-- UnloadSceneOp
"AsyncOperationBase`1" "<SceneInstance>" <|-- UnloadSceneOp
@enduml
